/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Archer Systems
System Name: Boxee
System Number: 0.1
Programmer: TAM
Comments:
	(c) 2009 Tom Miller    

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/////////////////////Compiler Directives
// #SYMBOL_NAME 
// #HINT ""
// #CATEGORY "" 
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#OUTPUT_SHIFT 2
#ENABLE_DYNAMIC
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#PRINT_TO_TRACE
#ENABLE_TRACE

/////////////// Inputs & Outputs
DIGITAL_INPUT _SKIP_,_SKIP_;

ANALOG_OUTPUT TCPIP_Status;
DIGITAL_INPUT  Pause, Stop, PlayNext, PlayPrev;
digital_input Up, Dn, Lt, Rt, Ok, Back; 

digital_input Jump_Photo, Jump_Music,Jump_Movie, Jump_TV;
digital_input Jump_APP, Jump_MenuPop, Jump_VidSet;

digital_input Set_Broadcast, Get_CurrentlyPlaying;
digital_input Monitor_Broadcast;

String_input command_in[256];

String_output CurrentCoverURL$;
String_output CurrentPlayStatus$, CurrentVideoNo$, CurrentSongNo$, CurrentType$;
String_output CurrentTitle$, CurrentTrack$, CurrentArtist$, CurrentAlbum$;
String_output CurrentGenre$, CurrentDirector$;
String_output CurrentPlotoutline$, CurrentPlot$, CurrentRating$;
String_output CurrentYear$, CurrentThumb$;
String_output CurrentTime$, CurrentDuration$, CurrentPercentage$;
String_output CurrentResolution$;
String_output CurrentFilename$, CurrentFilesize$, CurrentChanged$;


/*  DOCUMENTATION
Below is a partial list of the commands for media playback:

Command 	Description 

GetCurrentlyPlaying 	Retrieves the filename, details and status of the currently playing media.
GetVolume 	Retrieves the current volume setting as a percentage of the maximum possible value.
SetVolume(percent) 	Sets the volume as a percentage of the maximum possible.
Mute 	Toggles the sound on/off.
Pause 	Pauses the currently playing media.
Stop 	Stops the currently playing media.
PlayNext 	Starts playing/showing the next media/image in the current playlist or, if currently showing a slidshow, the slideshow playlist.
PlayPrev 	Starts playing/showing the previous media/image in the current playlist or, if currently showing a slidshow, the slideshow playlist.
Mute 	Toggles the sound on/off.
SeekPercentage(percent) 	Sets the playing position of the currently playing media as a percentage of the media’s length.
SeekPercentageRelative(relative-percentage) 	Adds/Subtracts the current percentage on to the current postion in the song
GetPercentage 	Retrieves the current playing position of the currently playing media as a percentage of the media’s length.

Below is a partial list of the commands for sending actions / keystrokes:

Command 	Description 

SendKey(256) 	Click on SELECT button
SendKey(270) 	Click on UP button
SendKey(271) 	Click on DOWN button
SendKey(272) 	Click on LEFT button
SendKey(273) 	Click on RIGHT button
SendKey(275) 	Click on BACK button
SendKey(<ASCII value + 61696>) 	Sends an ASCII key (used in keyboard)
SendKey(61704) 	Sends an backspace key (used in keyboard)
*/
 
///////////////////////////// Parameters

STRING_PARAMETER BoxeeIPAddr$[16];   //the ip of the boxee server.
INTEGER_PARAMETER BoxeePort; //the boxee ip port, usually 8800


/////////////////////////// Sockets
TCP_CLIENT TCPClient[16384];
UDP_SOCKET UDPClient[1024];

////////////////// Global Variables
// string upCmd[2000], dnCmd[2000], ltCmd[2000], rtCmd[2000], okCmd[2000];
STRING OUT$[1024], LastSent[1024];

String CurrentPlayStatus[256], CurrentVideoNo[256], CurrentType[256];
String CurrentTitle[256], CurrentGenre[256], CurrentDirector[256];
String CurrentPlotoutline[256], CurrentPlot[256], CurrentRating[256];
String CurrentYear[256], CurrentThumb[256], CurrentResolution[256];
String CurrentTime[256], CurrentDuration[256], CurrentPercentage[256];
String CurrentFilename[256], CurrentFilesize[256], CurrentChanged[256];
String CurrentSongNo[256], CurrentTrack[256], CurrentArtist[256], CurrentAlbum[256];

////////////// TCPIP Connection

SOCKETCONNECT TCPClient {
	SocketSend(TCPClient, out$);
	print("sent: %s",out$);
	out$ = "";
}

SOCKETDISCONNECT TCPClient {
	Print("Socket disconnected");
}

SOCKETSTATUS TCPClient {
    TCPIP_Status = SocketGetStatus();
}

Signed_Integer_Function TCP_Connect(){
    SIGNED_INTEGER status;
    status = SocketConnectClient (TCPClient, BoxeeIPAddr$, BoxeePort, 0);
    if (status < 0){
		Print("Error connecting socket to address %s port %d",BoxeeIPAddr$, BoxeePort);
		print("status: %d",status);
		status = SocketDisconnectClient(TCPClient);
	    if (status < 0){
			Print("Error disconnecting socket from %s port %d",BoxeeIPAddr$, BoxeePort);
			print("status: %d",status);
		}
    }
	Return (status);
}

Function SendCommand(string command){
	Signed_Integer status;
	Makestring(out$, "GET /xbmcCmds/xbmcHttp?command=%s\n\n",command); 
	TCP_Connect();
	LastSent = command;
}
 
// BOXEE COMMANDS //

push up {
	SendCommand("SendKey(270)");
}

push dn {
	SendCommand("SendKey(271)");
}

push lt {
	SendCommand("SendKey(272)"); 
}

push rt {
	SendCommand("SendKey(273)"); 
}

push ok {
	SendCommand("SendKey(256)"); 
}

push back {
	SendCommand("SendKey(275)"); 
}

push Pause {
	SendCommand("Pause"); 
}

push Stop {
    SendCommand("Stop"); 
}

push PlayNext {
    SendCommand("PlayNext"); 
}

push PlayPrev {
    SendCommand("PlayPrev"); 
}   

push Set_Broadcast {
	SendCommand("SetBroadcast(1;8278)");
}

push Monitor_Broadcast {
	signed_integer status;

	status = SocketUDP_Enable(UDPClient,BoxeeIPAddr$,8278);

	print("UDP Socket status: %d",status);
	if (status < 0) {
	print("error listening on UDP Socket");
	}
}

release Monitor_Broadcast {
	signed_integer status;

	status = SocketUDP_Disable(UDPClient);
	if (status < 0) {
	print("error releasing UDP Socket");
	}

}

push Get_CurrentlyPlaying {
	SendCommand("GetCurrentlyPlaying(special:\\xbmc\web\thumb.jpg;special:\\xbmc\web\nothing.jpg)");
}

push Jump_Photo {
	SendCommand("ExecBuiltIn(ActivateWindow(10491))");
}

push Jump_Music {
	SendCommand("ExecBuiltIn(ActivateWindow(10484))");
}

push Jump_Movie {
	SendCommand("ExecBuiltIn(ActivateWindow(10481))");
}

push Jump_TV {
	SendCommand("ExecBuiltIn(ActivateWindow(10480))");
}

push Jump_APP {
	SendCommand("ExecBuiltIn(ActivateWindow(10482))");
}

push Jump_MenuPop {
	SendCommand("ExecBuiltIn(ActivateWindow(10467))");
}

push Jump_VidSet {
	SendCommand("ExecBuiltIn(ActivateWindow(10478))");
} 

change command_in{
	SendCommand(command_in);
}

//////////////////////// FEEDBACK FROM BOXEE

///// UDP
SocketReceive UDPClient {
	String in$[1024], debug[255];
	Signed_integer isBroadcast, isMulticast, Status;
	String SenderIP[32];
	
	print("UDP received");
	
	in$ = UDPClient.SocketRxBuf;
	ClearBuffer(UDPClient.SocketRxBuf);
	
//	debug = left(in$,255);
//	print("%s",debug);
	
	If (find("MediaChanged:",in$)){
		delay(50);
		SendCommand("GetCurrentlyPlaying(special:\\xbmc\web\thumb.jpg;special:\\xbmc\web\nothing.jpg)");
	}
	Else if (find("OnPlayBackStopped",in$)){
		delay(50);
		SendCommand("GetCurrentlyPlaying(special:\\xbmc\web\thumb.jpg;special:\\xbmc\web\nothing.jpg)");	
	}
}

///// TCP

SOCKETRECEIVE TCPClient {
	String In$[16384];
    string debug[16384], debugPrint[16384];
    integer start, end, length, i, debugInt;
	
	debug = TCPClient.SocketRxBuf;
	
	In$ = Gather("</html>",TCPClient.SocketRxBuf);
	ClearBuffer(TCPClient.SocketRxBuf);
    
	length = len(in$);
	print("gathered length: %u",length);
	
	If (Find("OK",In$,1) > 0){
		print("found OK");
		
		end = 1;
		i = 1;

		If (lastSent = "GetCurrentlyPlaying"){

			makestring(CurrentCoverURL$,"http://%s:%u/thumb.jpg",BoxeeIPAddr$, BoxeePort);
			
			start = find("Filename:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 9);
				If (end = 0) {
					end = find("</html>",in$,start+9);
				}
				CurrentFilename = mid(in$, start + 9, end - start - 9);
			}
			Else { CurrentFilename = ""; }
			print("CurrentFilename: %s",CurrentFilename);
						
			start = find("PlayStatus:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 11);
				CurrentPlayStatus = mid(in$, start + 11, end - start - 11);
			}
			Else { CurrentPlayStatus = ""; }
			print("CurrentPlayStatus: %s",CurrentPlayStatus);
			
			start = find("VideoNo:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 8);
				CurrentVideoNo = mid(in$, start + 8, end - start - 8);
			}
			Else { CurrentVideoNo = ""; }			
			print("CurrentVideoNo: %s", CurrentVideoNo);

			start = find("SongNo:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 7);
				CurrentSongNo = mid(in$, start + 7, end - start - 7);
			}
			Else { CurrentSongNo = ""; }			
			print("CurrentSongNo: %s", CurrentSongNo);
			
			start = find("Type:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 5);
				CurrentType = mid(in$, start + 5, end - start - 5);
			}
			Else { CurrentType = ""; }			
			print("CurrentType: %s", CurrentType);

            start = find("Resolution:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 11);
				CurrentResolution = mid(in$, start + 11, end - start - 11);
			}
			Else { CurrentResolution = ""; }			
			print("CurrentResolution: %s", CurrentResolution);
			
			start = find("Title:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 6);
				CurrentTitle = mid(in$, start + 6, end - start - 6);
			}
			Else { CurrentTitle = ""; }			
			print("CurrentTitle: %s", CurrentTitle);

			start = find("Track:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 6);
				CurrentTrack = mid(in$, start + 6, end - start - 6);
			}
			Else { CurrentTrack = ""; }			
			print("CurrentTrack: %s", CurrentTrack);

			start = find("Artist:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 7);
				CurrentArtist = mid(in$, start + 7, end - start - 7);
			}
			Else { CurrentArtist = ""; }			
			print("CurrentArtist: %s", CurrentTitle);

			start = find("Album:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 6);
				CurrentAlbum = mid(in$, start + 6, end - start - 6);
			}
			Else { CurrentAlbum = ""; }			
			print("CurrentAlbum: %s", CurrentAlbum);

			start = find("Genre:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 6);
				CurrentGenre = mid(in$, start + 6, end - start - 6);
			}
			Else { CurrentGenre = ""; }			
			print("CurrentGenre: %s", CurrentGenre);

			start = find("Director:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 9);
				CurrentDirector = mid(in$, start + 9, end - start - 9);
			}
			Else { CurrentDirector = ""; }			
			print("CurrentDirector: %s", CurrentDirector);

			start = find("Plotoutline:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 12);
				CurrentPlotoutline = mid(in$, start + 12, end - start - 12);
			}
			Else { CurrentPlotoutline = ""; }			
			print("CurrentPlotoutline: %s", CurrentPlotoutline);

			start = find("Plot:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 5);
				CurrentPlot = mid(in$, start + 5, end - start - 5);
			}
			Else { CurrentPlot = ""; }			
			print("CurrentPlot: %s", CurrentPlot);

			start = find("Rating:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 7);
				CurrentRating = mid(in$, start + 7, end - start - 7);
			}
			Else { CurrentRating = ""; }			
			print("CurrentRating: %s", CurrentRating);

			start = find("Year:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 5);
				CurrentYear = mid(in$, start + 5, end - start - 5);
			}
			Else { CurrentYear = ""; }			
			print("CurrentYear: %s", CurrentYear);

			start = find("Thumb:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 6);
				CurrentThumb = mid(in$, start + 6, end - start - 6);
			}
			Else { CurrentThumb = ""; }			
			print("CurrentThumb: %s", CurrentThumb);

			start = find("Time:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 5);
				CurrentTime = mid(in$, start + 5, end - start - 5);
			}
			Else { CurrentTime = ""; }			
			print("CurrentTime: %s", CurrentTime);

			start = find("Duration:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 9);
				CurrentDuration = mid(in$, start + 9, end - start - 9);
			}
			Else { CurrentDuration = ""; }			
			print("CurrentDuration: %s", CurrentDuration);

			start = find("Percentage:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 11);
				CurrentPercentage = mid(in$, start + 11, end - start - 11);
			}
			Else { CurrentPercentage = ""; }			
			print("CurrentPercentage: %s", CurrentPercentage);

			start = find("File size:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 10);
				CurrentFilesize = mid(in$, start + 10, end - start - 10);
			}
			Else { CurrentFilesize = ""; }			
			print("CurrentFilesize: %s", CurrentFilesize);

			start = find("Changed:",in$,end);
			If (start > 0){
				end = find("\x0A",in$,start + 8);
				If (end = 0) {
					end = find("</html>",in$,start+8);
				}
				CurrentChanged = mid(in$, start + 8, end - start - 8);
			}
			Else { CurrentChanged = ""; }
			print("CurrentChanged: %s", CurrentChanged);

			CurrentPlayStatus$ = left(CurrentPlayStatus,255);
			CurrentVideoNo$ = left(CurrentVideoNo,255);
			CurrentSongNo$ = left(CurrentSongNo,255);
			CurrentType$ = left(CurrentType,255);
			CurrentTitle$ = left(CurrentTitle,255);
			CurrentArtist$ = left(CurrentArtist,255);
			CurrentAlbum$ = left(CurrentAlbum,255);
			CurrentGenre$ = left(CurrentGenre,255);
			CurrentDirector$ = left(CurrentDirector,255);
			CurrentPlotoutline$ = left(CurrentPlotoutline,255);
			CurrentPlot$ = left(CurrentPlot,255);
			CurrentRating$ = left(CurrentRating,255);
			CurrentYear$ = left(CurrentYear,255); 
			CurrentThumb$ = left(CurrentThumb,255);
			CurrentTime$ = left(CurrentTime,255);
			CurrentDuration$ = left(CurrentDuration,255); 
			CurrentPercentage$ = left(CurrentPercentage,255);
			CurrentFilename$ = left(CurrentFilename,255); 
			CurrentFilesize$ = left(CurrentFilesize,255);
			CurrentResolution$ = left(CurrentResolution,255);
			CurrentChanged$ = left(CurrentChanged,255);
		}
	}  
}	
///////////// Initialization script
Function Main(){                            
	SendCommand("SetBroadcast(1;8278)");
}
